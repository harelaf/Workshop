@page "/"
@using MarketWeb.Client.Connect
@using MarketWeb.Client.Helpers
@using MarketWeb.Client.Services
@using MarketWeb.Shared
@using MarketWeb.Shared.DTO
@inject IMarketAPIClient marketAPIClient
@inject IHttpService httpService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@layout MainLayout
<style>
    h1 {
        text-align: center;
    }
</style>

<h1>Welcome to the Market!</h1>
<br />
<div class="card">
    <h4 class="card-header">Item Search Box</h4>
    <div class="card-body">
        <EditForm Model="@model" OnSubmit="ItemSearchForm">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="model.ItemName" class="form-control" />
            </div>
            <div class="form-group">
                <label>Category</label>
                <InputText @bind-Value="model.Category" class="form-control" />
            </div>
            <div class="form-group">
                <label>Keyword</label>
                <InputText @bind-Value="model.Keyword" class="form-control" />
            </div>
            <button type="submit" disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Search Items
            </button>
        </EditForm>
    </div>
</div>
<br />
<table class="table">
    <thead>
        <tr>
            <th>Store Name</th>
            <th>Founder Name</th>
            <th>View Store Button</th>
        </tr>
    </thead>
    <tbody>
        @foreach (StoreDTO item in activeStores)
        {
            <tr>
                <td>@item.StoreName</td>
                <td>@item.Founder.Username</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ViewStoreButton(item.StoreName)">View Store</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private Models.SearchItemModel model = new Models.SearchItemModel();
    private bool loading;
    private ICollection<StoreDTO> activeStores = new List<StoreDTO>();

    private async void ViewStoreButton(string StoreName)
    {
        // reset alerts on submit
        AlertService.Clear();

        NavigationManager.NavigateTo($"StorePage/{StoreName}");
    }

    private async void ItemSearchForm()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;

        if (model.Category == null && model.ItemName == null && model.Keyword == null)
        {
            loading = false;
            AlertService.Error("Please enter a value before trying to search for an item.");
            StateHasChanged();
        }
        else
        {
            //Task<Response<List<ItemDTO>>> task = _marketAPIClient.GetItemInformation(itemname, category, keyword);
            /*List<ItemDTO> items = new List<ItemDTO>();
            items.Add(new ItemDTO("item1", 10.5, "store1"));
            items.Add(new ItemDTO("item2", 9.5, "store1"));
            items.Add(new ItemDTO("item3", 15.5, "store2"));*/
            //Response<List<ItemDTO>> response = task.Result; //new Response<List<ItemDTO>>(items);
            loading = false;
            NavigationManager.NavigateTo($"ItemSearch/{model.ItemName}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        StoreDTO store1 = new StoreDTO();
        StoreDTO store2 = new StoreDTO();
        List<StoreDTO> lst = new List<StoreDTO>();
        lst.Add(store1);
        lst.Add(store2);
        try
        {
            Response<List<StoreDTO>> response = await marketAPIClient.GetAllActiveStores();
            if (response.ErrorOccured)
            {
                throw new Exception(response.ErrorMessage);
            }
            activeStores = lst;
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            StateHasChanged();
        }
    }
}