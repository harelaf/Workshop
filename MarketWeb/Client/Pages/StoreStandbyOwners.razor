@page "/StorePage/{StoreName}/StoreStandbyOwners"
@using MarketWeb.Client.Connect
@using MarketWeb.Client.Helpers
@using MarketWeb.Client.Services
@using MarketWeb.Shared
@using MarketWeb.Shared.DTO
@inject IMarketAPIClient _marketAPIClient
@inject IHttpService httpService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@layout MainLayout

<div class="text-center" id="Title">
    <h1 class="display-4">@(StoreName)'s Standby Owners Page</h1>
    <br />
</div>
@if (standbyOwners != null && standbyOwners.Count > 0)
{
    @if (CanViewStoreRoles && usernameList != null)
    {
        <h3>an appointment is accepted only when all the following workers accept it:</h3>
        <br />
        String str = "";
        int Index = 1;
        @foreach (String username in usernameList)
            str += $"{Index++}. {username}.\n";
        <p style="white-space:pre-wrap;">@str</p>
    }
    <h2>Standby Owners Table</h2>
    <br />
    <div>
        <table class="table" style="white-space:pre-wrap; width:100%" id="@StoreName">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Respond</th>
                    <th>View Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (string owner in standbyOwners.Keys)
                {
                    <tr>
                        <th>@owner</th>
                        <th>
                            <button class="btn btn-primary" @onclick="() => AllowResponseToAppointment(owner)">Respond</button>
                        </th>
                        @if (CanViewStoreRoles)
                        {
                            <th>
                                <button class="btn btn-primary" @onclick="() => ShowRespondedUsernames(owner)">View Status</button>
                            </th>
                        }
                    </tr>
                    @if (owner == focusedOwner)
                    {
                        @if (RespondedUsernames)
                        {
                            String str = "";
                            @if (standbyOwners[owner].Count > 0)
                            {
                                int Index = 1;
                                @foreach (String username in standbyOwners[owner])
                                    str += $"{Index++}. {username}.\n";

                            }
                            else
                            {
                                str = "no acceptors yet.";
                            }
                            <tr><p>@str</p></tr>
                        }
                        else
                        {
                            <tr>
                                <th><button class="btn btn-primary" @onclick="() => AcceptOwnerAppointment(owner)">Accept</button></th>
                                <th><button class="btn btn-primary" @onclick="() => RejectOwnerAppointment(owner)">Reject</button></th>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
}
else
{
    <h2>there are no standby Owners here.</h2>
}

@code {
    [Parameter] public string StoreName { get; set; }
    Dictionary<string, List<string>> standbyOwners = null;
    string focusedOwner = null;
    private bool RespondedUsernames = false;
    private bool CanViewStoreRoles { get; set; } = false;
    private List<string> usernameList = null;


    private void AllowResponseToAppointment(string owner)
    {
        // reset alerts on submit
        AlertService.Clear();

        try
        {
            focusedOwner = owner;
            RespondedUsernames = false;
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            StateHasChanged();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ShowRespondedUsernames(string owner)
    {
        // reset alerts on submit
        AlertService.Clear();

        try
        {
            focusedOwner = owner;
            RespondedUsernames = true;
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            StateHasChanged();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void AcceptOwnerAppointment(string owner)
    {
        // reset alerts on submit
        AlertService.Clear();

        try
        {
            Response<bool> response = await _marketAPIClient.AcceptOwnerAppointment(StoreName, owner);
            if (response.ErrorOccured)
            {
                throw new Exception(response.ErrorMessage);
            }
            string message = response.Value ? $"Successfully appointed new owner: {owner}" : $"'{owner}' is standing by for the other owner appointers' approval.";
            focusedOwner = null;
            NavigationManager.NavigateTo("");
            NavigationManager.NavigateTo($"/StorePage/{StoreName}/StoreStandbyOwners");
            AlertService.Info(message);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            StateHasChanged();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void RejectOwnerAppointment(string owner)
    {
        // reset alerts on submit
        AlertService.Clear();

        try
        {
            Response response = await _marketAPIClient.RejectOwnerAppointment(StoreName, owner);
            if (response.ErrorOccured)
            {
                throw new Exception(response.ErrorMessage);
            }
            focusedOwner = null;
            NavigationManager.NavigateTo("");
            NavigationManager.NavigateTo($"/StorePage/{StoreName}/StoreStandbyOwners");
            AlertService.Info($"Successfully rejected '{owner}'s' appointment.");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            StateHasChanged();
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AlertService.Clear();

        try
        {
            Response<Dictionary<string, List<string>>> response = await _marketAPIClient.GetStandbyOwnersInStore(StoreName);
            if (response.ErrorOccured)
            {
                throw new Exception(response.ErrorMessage);
            }
            standbyOwners = response.Value;
            CanViewStoreRoles = !(await _marketAPIClient.HasPermission(StoreName, "STORE_WORKERS_INFO")).ErrorOccured;
            if (CanViewStoreRoles)
            {
                Response<List<String>> res = await _marketAPIClient.GetUsernamesWithOwnerAppointmentPermissionInStore(StoreName);
                if (res.ErrorOccured)
                {
                    throw new Exception(response.ErrorMessage);
                }
                usernameList = res.Value;
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            StateHasChanged();
        }
        finally
        {
            StateHasChanged();
        }
    }
}
