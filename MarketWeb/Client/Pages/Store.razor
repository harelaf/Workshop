@page "/StorePage/{StoreName}"
@using MarketWeb.Client.Connect
@using MarketWeb.Client.Helpers
@using MarketWeb.Client.Services
@using MarketWeb.Shared
@using MarketWeb.Shared.DTO
@inject IMarketAPIClient _marketAPIClient
@inject IHttpService httpService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@layout MainLayout

@if (StoreInfo != null)
{
	<div class="text-center">
		<h1 class="display-4">Store @(StoreInfo.StoreName) Page</h1>
		@if (!StoreIsActive)
		{
			<h2 class="display-4" style="color:red">Store is Inactive</h2>
		}
		<br />
	</div>
	@if (CanViewPurchaseHistory || CanViewStoreMessages)
	{
		<h2>Store Administration:</h2>
	}
	@if (CanViewPurchaseHistory)
	{
		<button class="btn btn-primary" @onclick="() => ViewPurchaseHistory()">View @(StoreInfo.StoreName) Purchase History</button>

	}
	@if (CanViewStoreMessages)
	{
		<button class="btn btn-primary" @onclick="() => ViewStoreMessages()">View @(StoreInfo.StoreName) Messages</button>
	}
	@if (CanCloseStore)
	{
		<button class="btn btn-primary" @onclick="() => CloseStore()">close @(StoreInfo.StoreName)</button>
		<br />
		<br />
	}
	@if (CanCloseStorePermenantly)
	{
		<button class="btn btn-primary" @onclick="() => CloseStorePermenantly()">close @(StoreInfo.StoreName) Permenantly</button>
		<br />
		<br />
	}
	@if ((!StoreIsActive) && CanReopenStore)
	{
		<button class="btn btn-primary" @onclick="() => ReopenStore()">Reopen @(StoreInfo.StoreName)</button>
		<br />
		<br />
	}

	<br />
	@if (CanManageRoles)
	{
		<h2> Manage Store Roles: </h2>

		<a href="StorePage/@(StoreInfo.StoreName)/roles" class="btn btn-info"> View Store Roles</a>
		<br />
		<h5>Appoint Store Owner: </h5>
		<form method="post">
			<font color="black">New Owner Username: </font>
			<input type="text" required id="ownerUsername" name="ownerUsername" title="ownerUsername" />
			<input class="btn btn-info" type="submit" value="Appoint" asp-area="" asp-controller="Home"
		   asp-action="AppointStoreOwner" asp-route-newQuantity=""
		   asp-route-storename="@(StoreInfo.StoreName)" />
		</form>
		<br />
		<h5>Fire Store Owner: </h5>
		<form method="post">
			<font color="black">Owner Username: </font>
			<input type="text" required id="ownerUsername" name="ownerUsername" title="ownerUsername" />
			<input class="btn btn-info" type="submit" value="Fire" asp-area="" asp-controller="Home"
		   asp-action="FireStoreOwner" asp-route-newQuantity=""
		   asp-route-storename="@(StoreInfo.StoreName)" />
		</form>
		<br />
		<h5>Appoint Store Manager: </h5>
		<form method="post">
			<font color="black">New Manager Username: </font>
			<input type="text" required id="managerUsername" name="managerUsername" title="managerUsername" />
			<input class="btn btn-info" type="submit" value="Appoint" asp-area="" asp-controller="Home"
		   asp-action="AppointStoreManager" asp-route-newQuantity=""
		   asp-route-storename="@(StoreInfo.StoreName)" />
		</form>
		<br />
		<h5>Fire Store Manager: </h5>
		<form method="post">
			<font color="black">Manager Username: </font>
			<input type="text" required id="managerUsername" name="managerUsername" title="managerUsername" />
			<input class="btn btn-info" type="submit" value="Fire" asp-area="" asp-controller="Home"
		   asp-action="FireStoreManager" asp-route-newQuantity=""
		   asp-route-storename="@(StoreInfo.StoreName)" />
		</form>
		<br />
		<h5>Manage Permission of Store Manager: </h5>
		<form method="post">
			<font color="black">Manager Username: </font>
			<input type="text" required id="managerUsername" name="managerUsername" title="managerUsername" />
			<br />
			<font color="black">Permission- Receive information and Reply: </font>
			<input id="ReceiveInfoAndReply" name="ReciveInfoAndReply" type="checkbox" value="Receive information and Reply" />
			<br />
			<font color="black">Permission-Receive Store Purchase History: </font>
			<input id="ReceiveStorePurchaseHistory" name="ReceiveStorePurchaseHistory" type="checkbox" value="Receive Store Purchase History" />
			<br />
			<input class="btn btn-info" type="submit" value="Modify" asp-area="" asp-controller="Home"
		   asp-action="ModifyStoreManagerPermission" asp-route-newQuantity=""
		   asp-route-storename="@(StoreInfo.StoreName)" />
		</form>
	}
	<br />
	<br />

	@if (LayoutConfig.IsLoggedIn || LayoutConfig.IsAdmin)
	{
		<h4>Send Question\Query to Store:</h4>
		<form method="post">
			<font color="black">Question\Query: </font>
			<input type="text" required id="msg" name="msg" title="msg" />
			<input class="btn btn-info" type="submit" value="Send" asp-area="" asp-controller="Home"
		   asp-action="SendMsgToStore" asp-route-newQuantity=""
		   asp-route-storename="@(StoreInfo.StoreName)" />
		</form>
	}


	<h2>Our Items:</h2>
	@if (StoreInfo.Stock == null || StoreInfo.Stock.Items == null || StoreInfo.Stock.Items.Count==0)
	{
		<font color="red"><b> this store doesn't have any items yet...</b></font>
	}
	else
	{
		IDictionary<int, Tuple<ItemDTO, int>> stock_dictionary = StoreInfo.Stock.Items;
		<table class="table">
			<thead>
				<tr>
					<th>Item Name</th>
					<th>Item Price</th>
					<th>View Item Button</th>
					@if (CanManageStock)
					{
						<th>Item Amount in Stock</th>
						<th>Remove Item from Stock</th>
						<th>Update Quantoty of Item in Stock</th>
					}
				</tr>
			</thead>
			<tbody>
				@foreach (int itemID in stock_dictionary.Keys)
				{
					ItemDTO item = stock_dictionary[itemID].Item1;
					<tr>
						<th>@item.Name</th>
						<th>@item.Price</th>
						@if (CanManageStock)
						{
							<th>
								<a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="ItemPageEditable" asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID">View @item.Name Page</a>
							</th>
							<th> @stock_dictionary[itemID].Item2</th>
							<th>
								<a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="RemoveItemFromStock" asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID">Remove</a>
							</th>
							<th>
								<form method="post">
									<font color="black">new quantity: </font>
									<input type="number" min="0" required id="newQuantity" name="newQuantity" title="newQuantity" />
									<input class="btn btn-info" type="submit" value="Update" asp-area="" asp-controller="Home"
						   asp-action="UpdateItemQuantityInStock" asp-route-newQuantity=""
						   asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID" />
								</form>
							</th>
						}
						else
						{
							<th>
								<a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="ItemPage" asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID">View @item.Name Page</a>
							</th>
						}

					</tr>
				}
			</tbody>
		</table>
		@if (CanManageStock)
		{//add item to stock:
			//storeName, itemID, name, price, description, category, quantity
			<h5>Add New Item To Store Stock: </h5>
			<br />
			<form method="post">
				<font color="black">Item ID: </font>
				<input type="number" min="0" required id="itemID" name="itemID" title="itemID" />
				<br />
				<font color="black">Item Name: </font>
				<input type="text" required id="name" name="name" title="name" />
				<br />
				<font color="black">Item Price: </font>
				<input type="float" required min="0" id="price" name="price" title="price" />
				<br />
				<font color="black">Item Description: </font>
				<input type="text" required id="description" name="description" title="description" />
				<br />
				<font color="black">Item Category: </font>
				<input type="text" required id="category" name="category" title="category" />
				<br />
				<font color="black">Item Quantity: </font>
				<input type="number" required min="0" id="quantity" name="quantity" title="quantity" />
				<br />
				<input class="btn btn-info" type="submit" value="Add" asp-area="" asp-controller="Home"
		   asp-action="AddItemToStoreStock" asp-route-newQuantity=""
		   asp-route-storeName="@(StoreInfo.StoreName)" />
			</form>
		}
	}



	<h1 style="font-size:200%;">Store Ratings and Comments: </h1>

	@if (StoreInfo.Rating.Ratings.Count > 0)
	{
		Dictionary<String, Tuple<int, String>> rating = StoreInfo.Rating.Ratings;
		<table class="table">
			<thead>
				<tr>
					<th>User name</th>
					<th>Rating Score</th>
					<th>Review</th>
				</tr>
			</thead>
			<tbody>
				@foreach (String userName in rating.Keys)
				{
					<tr>
						<td>@userName</td>
						<td>@rating[userName].Item1</td>
						<td>@rating[userName].Item2</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else
	{
		<p style="font-size:160%;">no one has rated this store yet..</p>
	}
	@if (_marketAPIClient.LoggedIn)
	{
		<!-- add review button-->
		<h5>Add Your Review: </h5>
		<form method="post" id="usrform">
			<div width: 20%;>
				<p>Please pick a rating:</p>
				<input type="range" id="rating" name="rating" title="rating" min="0" max="10" value="5" oninput="this.nextElementSibling.value = this.value">
				<output>5</output>
			</div>
			<br />
			<textarea rows="2" cols="50" id="comment" name="comment" form="usrform"> Enter comment here...</textarea>
			<br />
			<input class="btn btn-info" type="submit" value="Add" asp-area="" asp-controller="Home"
		   asp-action="AddStoreReview" asp-route-newQuantity=""
		   asp-route-storeName="@(StoreInfo.StoreName)" />
		</form>
	}
}


@code {
	[Parameter] public string StoreName { get; set; }
	private Models.SearchItemModel model = new Models.SearchItemModel();
	private bool loading;
	private ICollection<StoreDTO> activeStores = new List<StoreDTO>();

	private StoreDTO StoreInfo { get; set; } = null;
	private bool CanManageRoles { get; set; } = false;
	private bool CanManageStock { get; set; } = false;
	private bool CanCloseStore { get; set; } = false;
	private bool CanReopenStore { get; set; } = false;
	private bool CanCloseStorePermenantly { get; set; } = false;
	private bool CanViewPurchaseHistory { get; set; } = false;
	private bool CanViewStoreMessages { get; set; } = false;
	private bool StoreIsActive { get; set; } = true;

	private async void OnValidSubmit()
	{
		// TODO
	}
	private async void ViewPurchaseHistory()
	{
		// reset alerts on submit
		AlertService.Clear();
		NavigationManager.NavigateTo($"/StorePage/{StoreName}/purchases");
	}
	private async void ViewStoreMessages()
	{
		// reset alerts on submit
		AlertService.Clear();
		NavigationManager.NavigateTo($"/StorePage/{StoreName}/messages");
	}
	private async void CloseStore()
	{
		// reset alerts on submit
		AlertService.Clear();
		try
		{
			Response res = await _marketAPIClient.CloseStore(StoreName);
			if (res.ErrorOccured)
			{
				throw new Exception(res.ErrorMessage);
			}
			else
			{
				AlertService.Info("Successfully close store!");
			}
		}
		catch(Exception e)
		{
			AlertService.Error(e.Message);
		}
		finally
        {
            loading = false;
            StateHasChanged();
        }
    }
	private async void CloseStorePermenantly()
	{
		// reset alerts on submit
		AlertService.Clear();
		try
		{
			Response res = await _marketAPIClient.CloseStorePermanently(StoreName);
			if (res.ErrorOccured)
			{
				throw new Exception(res.ErrorMessage);
			}
			else
			{
				AlertService.Info("Successfully close store permebnantly!");
			}
		}
		catch(Exception e)
		{
			AlertService.Error(e.Message);
		}
		finally
        {
            loading = false;
            StateHasChanged();
        }
    }//
	private async void ReopenStore()
	{
		// reset alerts on submit
		AlertService.Clear();
		try
		{
			Response res = await _marketAPIClient.ReopenStore(StoreName);
			if (res.ErrorOccured)
			{
				throw new Exception(res.ErrorMessage);
			}
			else
			{
				AlertService.Info("Successfully reopen store permebnantly!");
			}
		}
		catch(Exception e)
		{
			AlertService.Error(e.Message);
		}
		finally
        {
            loading = false;
            StateHasChanged();
        }
    }
	protected override async Task OnInitializedAsync()
	{
		try
		{
			Response<StoreDTO> response = await _marketAPIClient.GetStoreInformation(StoreName);//new Response<StoreDTO>(new StoreDTO(new StoreFounderDTO("afik's store", "afik"),"afik's store", "Active"));// get store frome service
			if (response.ErrorOccured)
			{
				throw new Exception(response.ErrorMessage);
			}
			StoreInfo = response.Value;
			StoreIsActive = response.Value.State == StoreState.Active;
			CanManageRoles = !(await _marketAPIClient.HasPermission(StoreName, "APPOINT_OWNER")).ErrorOccured;
			CanManageStock =!(await _marketAPIClient.HasPermission(StoreName, "MANAGE_STOCK")).ErrorOccured;
			CanCloseStore =!(await _marketAPIClient.HasPermission(StoreName, "CLOSE_STORE")).ErrorOccured;
			CanReopenStore =!(await _marketAPIClient.HasPermission(StoreName, "REOPEN_STORE")).ErrorOccured;
			CanCloseStorePermenantly =!(await _marketAPIClient.HasPermission(StoreName, "PERMENENT_CLOSE_STORE")).ErrorOccured;
			CanViewPurchaseHistory =!(await _marketAPIClient.HasPermission(StoreName, "STORE_HISTORY_INFO")).ErrorOccured;
			CanViewStoreMessages =!(await _marketAPIClient.HasPermission(StoreName, "RECEIVE_AND_REPLY_STORE_MESSAGE")).ErrorOccured;
		}
		catch (Exception ex)
		{
			AlertService.Error(ex.Message);
		}
		finally
		{
			StateHasChanged();
		}
		//return view;
	}

}