@page "/StorePage/{StoreName}"
@using MarketWeb.Client.Connect
@using MarketWeb.Client.Helpers
@using MarketWeb.Client.Services
@using MarketWeb.Shared
@using MarketWeb.Shared.DTO
@inject IMarketAPIClient _marketAPIClient
@inject IHttpService httpService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@layout MainLayout

<div class="text-center">
    <h1 class="display-4">Store @(StoreInfo.StoreName) Page</h1>
    @if(!StoreIsActive)
    {
        <h2 class="display-4" style="color:red">Store is Inactive</h2>
    }
    <br />
</div>
@if (CanViewPurchaseHistory || CanViewStoreMessages)
{
    <h2>Store Administration:</h2>
}
@if (CanViewPurchaseHistory)
{
    <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="StorePurchaseHistoryPage"
        asp-route-storename="@(StoreInfo.StoreName)" > 
        View @(StoreInfo.StoreName) Purchase History
    </a>
}
@if (CanViewStoreMessages)
{
    <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="StoreMessagesPage" 
        asp-route-storename="@(StoreInfo.StoreName)" >
        View @(StoreInfo.StoreName) Messages
   </a>

}
@if (CanCloseStore)
{
    <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="CloseStore" 
        asp-route-storeName="@(StoreInfo.StoreName)" >
        close @(StoreInfo.StoreName)
   </a>
   <br />
   <br /> 
}
@if (CanCloseStorePermenantly)
{
    <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="CloseStorePermenantly" 
        asp-route-storeName="@(StoreInfo.StoreName)" >
        close @(StoreInfo.StoreName) Permenantly
   </a>
   <br />
   <br /> 
}
@if((!StoreIsActive) && CanReopenStore)
{
    <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="ReopenStore" 
        asp-route-storeName="@(StoreInfo.StoreName)" >
        Reopen @(StoreInfo.StoreName)
   </a>
   <br />
   <br /> 
}

<br />
@if (CanManageRoles)
{
    <h2> Manage Store Roles: </h2>

    <NavLink href="StorePage/@(StoreInfo.StoreName)/roles" class="btn btn-info"> View Store Roles</NavLink>
    <br />
    <h5>Appoint Store Owner: </h5>
    <form method="post">
        <font color="black">New Owner Username: </font>
        <input type="text" required  id="ownerUsername" name="ownerUsername" title="ownerUsername" />
        <input class="btn btn-info" type="submit" value="Appoint" asp-area="" asp-controller="Home" 
            asp-action="AppointStoreOwner" asp-route-newQuantity="" 
            asp-route-storename="@(StoreInfo.StoreName)" />
    </form>
    <br />
    <h5>Fire Store Owner: </h5>
    <form method="post">
        <font color="black">Owner Username: </font>
        <input type="text" required id="ownerUsername" name="ownerUsername" title="ownerUsername" />
        <input class="btn btn-info" type="submit" value="Fire" asp-area="" asp-controller="Home" 
            asp-action="FireStoreOwner" asp-route-newQuantity="" 
            asp-route-storename="@(StoreInfo.StoreName)" />
    </form>
    <br />
    <h5>Appoint Store Manager: </h5>
    <form method="post">
        <font color="black">New Manager Username: </font>
        <input type="text" required id="managerUsername" name="managerUsername" title="managerUsername" />
        <input class="btn btn-info" type="submit" value="Appoint" asp-area="" asp-controller="Home" 
            asp-action="AppointStoreManager" asp-route-newQuantity="" 
            asp-route-storename="@(StoreInfo.StoreName)" />
    </form>
    <br />
    <h5>Fire Store Manager: </h5>
    <form method="post">
        <font color="black">Manager Username: </font>
        <input type="text" required id="managerUsername" name="managerUsername" title="managerUsername" />
        <input class="btn btn-info" type="submit" value="Fire" asp-area="" asp-controller="Home" 
            asp-action="FireStoreManager" asp-route-newQuantity="" 
            asp-route-storename="@(StoreInfo.StoreName)" />
    </form>
    <br />
    <h5>Manage Permission of Store Manager: </h5>
    <form method="post">
        <font color="black">Manager Username: </font>
        <input type="text" required id="managerUsername" name="managerUsername" title="managerUsername" />
         <br />
        <font color="black">Permission- Receive information and Reply: </font>
        <input id="ReceiveInfoAndReply" name="ReciveInfoAndReply" type="checkbox" value="Receive information and Reply" />
        <br />
        <font color="black">Permission-Receive Store Purchase History: </font>
        <input id="ReceiveStorePurchaseHistory" name="ReceiveStorePurchaseHistory" type="checkbox" value="Receive Store Purchase History" />
        <br />
        <input class="btn btn-info" type="submit" value="Modify" asp-area="" asp-controller="Home" 
            asp-action="ModifyStoreManagerPermission" asp-route-newQuantity="" 
            asp-route-storename="@(StoreInfo.StoreName)" />
    </form>
}<br />
<br />

@if (LayoutConfig.IsLoggedIn || LayoutConfig.IsAdmin)
{
    <h4>Send Question\Query to Store:</h4>
    <form method="post">
        <font color="black">Question\Query: </font>
        <input type="text" required  id="msg" name="msg" title="msg" />
        <input class="btn btn-info" type="submit" value="Send" asp-area="" asp-controller="Home" 
            asp-action="SendMsgToStore" asp-route-newQuantity="" 
            asp-route-storename="@(StoreInfo.StoreName)" />
    </form>
}


<h2>Our Items:</h2>
@if (StoreInfo.Stock.Items.Count==0)
{
    <font color="red"><b> this store doesn't have any items yet...</b></font>
}
else
{
    IDictionary<ItemDTO, int> stock_dictionary = StoreInfo.Stock.Items;
    <table class="table">
        <thead>
            <tr>
                <th>Item Name</th>
                <th>Item Price</th>
                <th>View Item Button</th>
                @if (CanManageStock)
                {
                    <th>Item Amount in Stock</th>
                    <th>Remove Item from Stock</th>
                    <th>Update Quantoty of Item in Stock</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (ItemDTO item in stock_dictionary.Keys)
            {
                <tr>
                    <th>@item.Name</th>
                    <th>@item.Price</th>
                    @if (CanManageStock)
                    {
                        <th>
                        <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="ItemPageEditable" asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID">View @item.Name Page</a>
                        </th>
                        <th> @stock_dictionary[item]</th>
                        <th>
                            <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="RemoveItemFromStock" asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID">Remove</a> 
                        </th>
                        <th> 
                            <form method="post">
                                <font color="black">new quantity: </font>
                                <input type="number" min="0" required  id="newQuantity" name="newQuantity" title="newQuantity" />
                                <input class="btn btn-info" type="submit" value="Update" asp-area="" asp-controller="Home" 
                                    asp-action="UpdateItemQuantityInStock" asp-route-newQuantity="" 
                                    asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID" />
                            </form>
                        </th>
                    }
                    else
                    {
                        <th>
                        <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="ItemPage" asp-route-storename="@(item.StoreName)" asp-route-itemId="@item.ItemID">View @item.Name Page</a>
                        </th>
                    }
                    
                </tr>
            }
        </tbody>
    </table>
    @if (CanManageStock)
    {//add item to stock:
        //storeName, itemID, name, price, description, category, quantity
        <h5>Add New Item To Store Stock: </h5>
        <br />
        <form method="post">
            <font color="black">Item ID: </font>
            <input type="number" min="0" required  id="itemID" name="itemID" title="itemID" />
            <br />
            <font color="black">Item Name: </font>
            <input type="text" required id="name" name="name" title="name" />
            <br />
            <font color="black">Item Price: </font>
            <input type="float" required min="0" id="price" name="price" title="price" />
            <br />
            <font color="black">Item Description: </font>
            <input type="text" required id="description" name="description" title="description" />
            <br />
            <font color="black">Item Category: </font>
            <input type="text" required id="category" name="category" title="category" />
            <br />
            <font color="black">Item Quantity: </font>
            <input type="number" required min="0" id="quantity" name="quantity" title="quantity" />
            <br />
            <input class="btn btn-info" type="submit" value="Add" asp-area="" asp-controller="Home" 
                asp-action="AddItemToStoreStock" asp-route-newQuantity="" 
                asp-route-storeName="@(StoreInfo.StoreName)" />
        </form>
    }
}



<h1 style="font-size:200%;">Store Ratings and Comments: </h1>

@if (StoreInfo.Rating.Ratings.Count > 0)
{
    Dictionary<String, Tuple<int, String>> rating = StoreInfo.Rating.Ratings;
    <table class="table">
        <thead>
            <tr>
                <th>User name</th>
                <th>Rating Score</th>
                <th>Review</th>
            </tr>
        </thead>
        <tbody>
            @foreach (String userName in rating.Keys)
            {
                <tr>
                    <td>@userName</td>
                    <td>@rating[userName].Item1</td>
                    <td>@rating[userName].Item2</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p style="font-size:160%;">no one has rated this store yet..</p>
}
@if (_marketAPIClient.LoggedIn)
{ 
    <!-- add review button-->
    <h5>Add Your Review: </h5>
    <form method="post" id="usrform">
        <div width: 20%;>
            <p>Please pick a rating:</p>
            <input type="range" id="rating" name="rating" title="rating"  min="0" max="10" value="5" oninput="this.nextElementSibling.value = this.value">
            <output>5</output>
        </div>
        <br />
        <textarea rows="2" cols="50"  id="comment" name="comment" form="usrform"> Enter comment here...</textarea>
    <br />
        <input class="btn btn-info" type="submit" value="Add" asp-area="" asp-controller="Home" 
            asp-action="AddStoreReview" asp-route-newQuantity="" 
            asp-route-storeName="@(StoreInfo.StoreName)" />
    </form>
}

@code {
    [Parameter] public string StoreName{ get; set; }
    private Models.SearchItemModel model = new Models.SearchItemModel();
    private bool loading;
    private ICollection<StoreDTO> activeStores = new List<StoreDTO>();

    private StoreDTO StoreInfo { get; set; }
    private bool CanManageRoles { get { return (_marketAPIClient.HasPermission(StoreName, "APPOINT_OWNER")).Result.ErrorOccured; } }
    private bool CanManageStock { get { return (_marketAPIClient.HasPermission(StoreName, "MANAGE_STOCK")).Result.ErrorOccured; } }
    private bool CanCloseStore { get { return (_marketAPIClient.HasPermission(StoreName, "CLOSE_STORE")).Result.ErrorOccured; } }
    private bool CanReopenStore { get { return (_marketAPIClient.HasPermission(StoreName, "REOPEN_STORE")).Result.ErrorOccured; } }
    private bool CanCloseStorePermenantly { get { return (_marketAPIClient.HasPermission(StoreName, "PERMENENT_CLOSE_STORE")).Result.ErrorOccured; } }
    private bool CanViewPurchaseHistory { get { return (_marketAPIClient.HasPermission(StoreName, "STORE_HISTORY_INFO")).Result.ErrorOccured; } }
    private bool CanViewStoreMessages { get { return (_marketAPIClient.HasPermission(StoreName, "RECEIVE_AND_REPLY_STORE_MESSAGE")).Result.ErrorOccured; } }
    private bool StoreIsActive { get; set; }

    private async void OnValidSubmit()
    {
        // TODO
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Response<StoreDTO> response = await _marketAPIClient.GetStoreInformation(StoreName);//new Response<StoreDTO>(new StoreDTO(new StoreFounderDTO("afik's store", "afik"),"afik's store", "Active"));// get store frome service
            if (response.ErrorOccured)
            {
                throw new Exception(response.ErrorMessage);
            }
            StoreIsActive = response.Value.State == StoreState.Active;
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
        //return view;
    }

}