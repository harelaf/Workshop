@page "/StorePage/{StoreName}/roles"
@using MarketWeb.Client.Connect
@using MarketWeb.Client.Helpers
@using MarketWeb.Client.Services
@using MarketWeb.Shared
@using MarketWeb.Shared.DTO
@inject IMarketAPIClient _marketAPIClient
@inject IHttpService httpService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@layout MainLayout

<div class="text-center">
    <h1 class="display-4">Store @(StoreName) Roles Page</h1>
</div>
 <h4>Founder</h4>
 <h5>@(Founder.Username)</h5>
 <br />
 <h4>Owners</h4>
    @if (Owners.Count > 0)
    {
        <table style="width:50%" class="table">
            <tr>
                <th>Owner User Name</th>
                <th>Appointer User Name</th>
            </tr>
            @foreach (StoreOwnerDTO owner in Owners)
            {
                <tr>
                    <th>@owner.Username</th>
                    <th>@owner.Appointer</th>
                </tr>
            }
        </table>
    }
    else
    {
        <h4>store has no owners</h4>
    }
<br />
 <h4>Managers</h4>
    @if (Managers.Count > 0)
    {
        <table style="width:50%" class="table">
            <tr>
                <th>Manager User Name</th>
                <th>Appointer User Name</th>
            </tr>
            @foreach (StoreManagerDTO manager in Managers)
            {
                <tr>
                    <th>@manager.Username</th>
                    <th>@manager.Appointer</th>
                </tr>
            }
        </table>
    }
    else
    {
        <h4>store has no managers</h4>
    }

@code {
    [Parameter] public string StoreName{ get; set; }
    private Models.SearchItemModel model = new Models.SearchItemModel();
    private bool loading;
    private ICollection<StoreDTO> activeStores = new List<StoreDTO>();

    private StoreFounderDTO Founder { get; set; } = null;
    private List<StoreOwnerDTO> Owners { get; set; } = new List<StoreOwnerDTO>();
    private List<StoreManagerDTO> Managers { get; set; } = new List<StoreManagerDTO>();



    private async void OnValidSubmit()
    {
        // TODO
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
           Response<StoreFounderDTO> founder_res = await _marketAPIClient.GetStoreFounder(StoreName);//new Response<StoreFounderDTO>(new StoreFounderDTO(storeName, "Yafa"));//service.GetStoreFounder(storeName);
            /*List<StoreOwnerDTO> owners_list = new List<StoreOwnerDTO>();
            owners_list.Add(new StoreOwnerDTO(storeName, "Afik", "Shlomi"));
            owners_list.Add(new StoreOwnerDTO(storeName, "Shlomi", "Beni"));
            owners_list.Add(new StoreOwnerDTO(storeName, "Beni", "Yafa"));*/
            Response<List<StoreOwnerDTO>> owners_res = await _marketAPIClient.GetStoreOwners(StoreName);//new Response<List<StoreOwnerDTO>>(owners_list); //_service.GetStoreOwners(storeName);
            /*List<StoreManagerDTO> managers_list = new List<StoreManagerDTO>();
            managers_list.Add(new StoreManagerDTO(storeName, "Afik", "Shlomi"));
            managers_list.Add(new StoreManagerDTO(storeName, "Shlomi", "Beni"));
            managers_list.Add(new StoreManagerDTO(storeName, "Beni", "Yafa"));*/
            Response<List<StoreManagerDTO>> managers_res = await _marketAPIClient.GetStoreManagers(StoreName);//new Response<List<StoreManagerDTO>>(managers_list); //_service.GetStoreManagers(storeName);
            if (owners_res.ErrorOccured || managers_res.ErrorOccured || founder_res.ErrorOccured)
            {
                string message = "owners: " + owners_res.ErrorMessage + "\nmanagers: " + managers_res.ErrorMessage + "\nfounder: "+founder_res.ErrorMessage;
                throw new Exception(message);
            }
            Owners = owners_res.Value;
            Managers = managers_res.Value;
            Founder = founder_res.Value; 
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    
    }

}